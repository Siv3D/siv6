//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2020 Ryo Suzuki
//	Copyright (c) 2016-2020 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include <array>
# include "Types.hpp"
# include "Number.hpp"

namespace s3d
{
	namespace PRNG
	{
		/// <summary>
		/// SplitMix64 / Pseudo random number generator
		/// Result: 64-bit value
		/// Period: 2^64
		/// Footprint: 8 bytes
		/// Original implementation: http://prng.di.unimi.it/splitmix64.c
		/// </summary>
		class SplitMix64
		{
		public:

			using State_t = uint64;

		private:

			State_t x;

		public:

			/// <summary>
			/// 生成される整数値の型
			/// The integral type generated by the engine
			/// </summary>
			using result_type = uint64;

			/// <summary>
			/// 生成される乱数の最小値を返します。
			/// Returns the minimum value potentially generated by the random-number engine
			/// </summary>
			/// <returns>
			/// 生成される乱数の最小値
			/// The minimum potentially generated value
			/// </returns>
			[[nodiscard]]
			static constexpr result_type min() noexcept
			{
				return Smallest<result_type>;
			}

			/// <summary>
			/// 生成される乱数の最大値を返します。
			/// Returns the maximum value potentially generated by the random-number engine.
			/// </summary>
			/// <returns>
			/// 生成される乱数の最大値
			/// The maximum potentially generated value
			/// </returns>
			[[nodiscard]]
			static constexpr result_type max() noexcept
			{
				return Largest<result_type>;
			}

			/// <summary>
			/// 乱数エンジンを作成し、内部状態を初期化します。
			/// Constructs the engine and initializes the state.
			/// </summary>
			/// <param name="seed">
			/// 内部状態の初期化に使われるシード値
			/// seed value to use in the initialization of the internal state
			/// </param>
			SIV3D_NODISCARD_CXX20
			explicit constexpr SplitMix64(State_t seed) noexcept
				: x(seed) {}

			/// <summary>
			/// 乱数を生成します。
			/// Generates a pseudo-random value.
			/// </summary>
			/// <returns>
			/// 生成された乱数
			/// A generated pseudo-random value
			/// </returns>
			constexpr result_type operator()() noexcept
			{
				uint64 z = (x += 0x9e3779b97f4a7c15);
				z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9;
				z = (z ^ (z >> 27)) * 0x94d049bb133111eb;
				return z ^ (z >> 31);
			}

			template <size_t N>
			[[nodiscard]]
			constexpr std::array<result_type, N> generateSeeds() noexcept
			{
				std::array<result_type, N> seeds = {};

				for (auto& seed : seeds)
				{
					seed = operator()();
				}

				return seeds;
			}

			[[nodiscard]]
			constexpr const State_t& serialize() const noexcept
			{
				return x;
			}

			constexpr void deserialize(const State_t& data) noexcept
			{
				x = data;
			}
		};
	}
}
