//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2020 Ryo Suzuki
//	Copyright (c) 2016-2020 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include "Types.hpp"

namespace s3d
{
	/// <summary>
	/// SplitMix64 / Pseudo random number generator
	/// Result: 64-bit value
	/// Period: 2^64
	/// Size: 8 bytes
	/// Original implementation: http://prng.di.unimi.it/splitmix64.c
	/// </summary>
	class SplitMix64
	{
	private:

		uint64 x;

	public:

		/// <summary>
		/// 生成される整数値の型
		/// The integral type generated by the engine
		/// </summary>
		using result_type = uint64;

		/// <summary>
		/// 乱数エンジンを作成し、内部状態を初期化します。
		/// Constructs the engine and initializes the state.
		/// </summary>
		/// <param name="seed">
		/// 内部状態の初期化に使われるシード値
		/// seed value to use in the initialization of the internal state
		/// </param>
		explicit constexpr SplitMix64(uint64 seed) noexcept
			: x(seed) {}

		/// <summary>
		/// 乱数を生成します。
		/// Generates a pseudo-random value.
		/// </summary>
		/// <returns>
		/// 生成された乱数
		/// A generated pseudo-random value
		/// </returns>
		constexpr result_type next() noexcept
		{
			uint64 z = (x += 0x9e3779b97f4a7c15);
			z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9;
			z = (z ^ (z >> 27)) * 0x94d049bb133111eb;
			return z ^ (z >> 31);
		}

		[[nodiscard]]
		constexpr uint64 serialize() const noexcept
		{
			return x;
		}

		constexpr void deserialize(uint64 data) noexcept
		{
			x = data;
		}
	};
}
